import type { Ability } from "@lorcanito/lorcana-engine/abilities/abilities";
import type { CardColor } from "@lorcanito/shared/lorcana-engine";
import type { TargetFilter } from "../store/resolvers/filters";

export type { CardColor } from "@lorcanito/shared/lorcana-engine";

interface LorcanitoBaseCard {
  type: "character" | "item" | "action" | "location";
  missingTestCase?: boolean;
  notImplemented?: true;
  id: string;
  name: string;
  text?: string;
  flavour?: string;
  set: "TFC" | "ROF" | "ITI" | "URR" | "SSK" | "006" | "007" | "008";
  cost: number;
  colors: CardColor[];
  number: number;
  illustrator: string;
  inkwell?: boolean;
  characteristics: Array<Characteristics>;
  // 1.6. Types of Abilities
  // 1.6.1. There are several kinds of abilities in the Disney Lorcana TCG.
  // 1.6.1.1. Keywords are words or shortened phrases that represent a larger ability or abilities. See section 10 for the full list of
  // current keywords.
  // 1.6.1.2. Triggered abilities continuously look for a specific condition and have an effect when that condition is met.
  // Triggered abilities follow the rules in section 7.4.
  // 1.6.1.3. Activated abilities have a cost and an effect that occurs if that cost is paid. Activated abilities follow the rules in section 7.5.
  // 1.6.1.4. Static abilities are effects that are continuously active, either for a fixed length of time or for as long as the card
  // generating the effect is in play. Static abilities follow the rules in section 7.6.
  // 1.6.1.5. Replacement effects are generated by some static abilities. These replace one effect with another. Replacement
  // effects follow the rules in section 7.7.
  // TODO: Remove this, I added it because non implemented cards have empty abilities
  abilities?: any[];
  rarity: CardRarity;
  // Adding this for simplicity
  strength?: number;
  lore?: number;
  willpower?: number;
  title?: string;
  moveCost?: number;
  movementDiscounts?: {
    filters: TargetFilter[];
    amount: number;
  }[];
  cardCopyLimit?: number | "no-limit";
}

export interface LorcanitoLocationCard extends LorcanitoBaseCard {
  type: "location";
  title: string;
  lore?: number;
  moveCost: number;
  willpower: number;
  strength?: never;
}

// 6.5. Locations
// 6.5.1. Locations are a type of card that can be in play. A location is a location while in the Play zone; in all other zones it’s a location card.
// 6.5.2. Classification – A location is defined as having Location on the card’s classification line. Locations are the only card type that is printed in landscape (i.e., with the longer sides on the top and bottom). (See #2 on the diagram under 6.5.)
// 6.5.3. Cost – A location’s cost is in a different place on the card than the cost of other card types, but it works the same way. (See #1 on the diagram under 6.5.)
// 6.5.4. Move Cost – A location has a move cost. This is the amount of ink needed to move a character to this location. (See #3 on the diagram under 6.5.)
// 6.5.5. Willpower – Damage on a location is persistent, which means it accumulates over the course of the game. If a location has damage equal to or higher than its Willpower {W}, it’s banished as a required action. Note that locations don’t have a Strength {S} characteristic and don’t deal damage. (See #4 on the diagram under 6.5.)
// 6.5.6. Lore Value – A location may have a Lore value {L}, which is how much lore its player gains at the start of their turn during the Set step. (See #6 on the diagram under 6.5.)
// 6.5.7. Abilities – If a location has an ability, that ability can be used during the turn the location is played. (See #5 on the diagram under 6.5.)
export interface LorcanitoCharacterCard extends LorcanitoBaseCard {
  type: "character";
  title: string;
  lore: number;
  strength: number;
  cost: number;
  willpower: number;
  additionalNames?: string[];
}

// 6.3. Actions
// 6.3.1. Actions are a type of card that can be played but can’t be in play. An action is an action while being played; otherwise, it’s an action card.
// 6.3.1.1. An action is defined as having Action on the card’s classification line.
// 6.3.1.2. Actions are played from a player’s hand, but they’re not considered in play. An effect from an action doesn’t enter the bag. (See 8.7, Bag.)
// 6.3.2. Effects – Actions have effects rather than abilities.
// 6.3.3. Songs
// 6.3.3.1. Songs are actions that have a special rule in addition to the normal rules for actions (see 6.3.3.3).
// 6.3.3.2. A song is defined as having Action and Song on the card’s classification line.
// 6.3.3.3. All songs allow the player to pay an alternate cost instead of their ink cost to play them. Being a song means Instead of paying the ink cost of this card, you can {E} one of your characters in play with ink cost N or greater to play this card for free. This is called singing the song.
// 6.3.3.4. Some songs also have the keyword Sing Together, which functions similarly to the special rule. (See 10.10, Sing Together.)
// 6.3.3.5. The standard reminder text for a song is (A character with cost N or more can {E} to sing this song for free.)
// 6.3.4. Any effect that’s triggered because of an action being played is placed in the bag and will resolve after the effects of the action are fully resolved.
export interface LorcanitoActionCard extends LorcanitoBaseCard {
  type: "action";
  title?: never;
  text: string;
}

// 6.4. Items
// 6.4.1. Items are a type of card that can be in play. An item is an item only while in the Play zone; in all other zones it’s an item card.
// 6.4.2. An item is defined as having Item on the card’s classification line.
// 6.4.3. If an item has an ability, that ability can be used during the turn the item is played.
export interface LorcanitoItemCard extends LorcanitoBaseCard {
  type: "item";
  title?: never;
  text: string;
  abilities: Ability[];
}

type CardRarity = "common" | "uncommon" | "rare" | "super_rare" | "legendary";

export type LorcanitoCard =
  | LorcanitoLocationCard
  | LorcanitoCharacterCard
  | LorcanitoActionCard
  | LorcanitoItemCard;

export type Characteristics =
  | "location"
  | "mage"
  | "song"
  | "madrigal"
  | "racer"
  | "robot"
  | "action"
  | "hyena"
  | "item"
  | "villain"
  | "knight"
  | "dragon"
  | "illusion"
  | "tigger"
  | "seven dwarfs"
  | "pirate"
  | "detective"
  | "sorcerer"
  | "queen"
  | "puppy"
  | "titan"
  | "alien"
  | "king"
  | "mentor"
  | "inventor"
  | "fairy"
  | "captain"
  | "hero"
  | "prince"
  | "storyborn"
  | "floodborn"
  | "dreamborn"
  | "broom"
  | "ally"
  | "princess"
  | "musketeer"
  | "deity";

export type Abilities =
  | "singer"
  | "shift"
  | "challenger"
  | "sing-together"
  | "bodyguard"
  | "rush"
  | "reckless"
  | "evasive"
  | "resist"
  | "support"
  | "voiceless"
  | "ward"
  | "protector"
  | "vanish"
  | "meta"
  | "challenge_ready_chars";
