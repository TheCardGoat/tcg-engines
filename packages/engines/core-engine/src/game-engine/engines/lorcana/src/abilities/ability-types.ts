import type {
  LorcanaCardFilter,
  LorcanaZone,
} from "~/game-engine/engines/lorcana/src/lorcana-engine-types";

export type LayerItem = {
  id: string;
  sourceCardId: string;
  controllerId: string;
  ability: Ability;
  optional: boolean;
};

// **1.6. Types of Abilities**

// **1.6.1.   **There are several kinds of abilities in the *Disney Lorcana* TCG.
// **1.6.1.1. ** *Keywords* are words or shortened phrases that represent a larger ability or abilities. See section 10 for the full list of current keywords.
// **1.6.1.2. ** *Triggered abilities* continuously look for a specific condition and have an effect when that condition is met. Triggered abilities follow the rules in section 7.4.
// **1.6.1.3. ** *Activated abilities* have a cost and an effect that occurs if that cost is paid. Activated abilities fol ow the rules in section 7.5.
// **1.6.1.4. ** *Static abilities* are effects that are continuously active, either for a fixed length of time or for as long as the card generating the effect is in play. Static abilities fol ow the rules in section 7.6.
// **1.6.1.5. ** *Replacement effects* are generated by some static abilities. These replace one effect with another. Replacement effects fol ow the rules in section 7.7.
// **1.6.2.   **Whenever an effect would affect multiple players at the same time, the active player resolves that effect first, then in turn order each other player resolves that effect.
export type AbilityType =
  | "activated"
  | "triggered"
  | "static"
  | "keyword"
  | "replacement";

export type Ability = {
  id: string;
  type: AbilityType;
  text: string;
  targets?: AbilityTarget[]; // When an ability has no targets, targets must the taken from effects. When an ability has targets, the same targets must be applied to all the effects.
  cost?: AbilityCost;
  effects: Effect[];
  timing?: TriggerTiming;
};

export type AbilityDuration =
  | { type: "endOfTurn" }
  | { type: "untilLeaves" }
  | { type: "turns"; count: number }
  | { type: "permanent" };

export type DynamicValue = {
  type: "count" | "targetDamage" | "lastEffectValue" | "sourceStat";
  filter?: LorcanaCardFilter;
  stat?: "strength" | "willpower" | "lore";
  multiplier?: number;
};

export type AbilityTarget = {
  type: "card" | "player";
  zone?: LorcanaZone;
  controller?: "self" | "opponent" | "any";
  count?: number | DynamicValue;
  filter?: LorcanaCardFilter;
  targetAll?: boolean;
};

export type AbilityCost = {
  exert?: boolean;
  ink?: number;
  banish?: boolean;
  discard?: number;
  damage?: number;
};

export type Effect = {
  type: string;
  parameters: Record<string, any>;
};

export type Target = AbilityTarget;

export type TriggerTiming =
  | "onPlay"
  | "onQuest"
  | "onPutIntoInkwell"
  | "onChallenge"
  | "onBanish"
  | "onDamage"
  | "onMove"
  | "onActivatedAbility"
  | "startOfTurn"
  | "endOfTurn";
// | "OnPlay"
// | "OnLeavePlay"
// | "OnBanish"
// | "OnQuest"
// | "OnDamage"
// | "OnRemoveDamage"
// | "OnExert"
// | "OnReady"
// | "OnInk"
// | "OnDraw"
// | "OnDiscard"
// | "OnChallenge"
// | "WhileChallenging"
// | "WhileChallenged"
// | "OnTurnStart"
// | "OnTurnEnd"

export type ScryConfig = {
  lookAt: number;
  destinations: ScryDestination[];
};

export type ScryDestination = {
  zone: LorcanaZone;
  value?: number;
  location?: "Top" | "Bottom";
  shuffle?: boolean;
  remainder?: boolean;
  exerted?: boolean;
  order?: "playerChoice" | "random";
  filter?: LorcanaCardFilter;
  reveal?: boolean;
  max?: number;
  min?: number;
};
